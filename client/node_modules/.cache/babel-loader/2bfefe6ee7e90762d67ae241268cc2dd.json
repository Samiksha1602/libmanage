{"ast":null,"code":"import _objectSpread from\"D:/sakshi college/cc miniproject/lib_management/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as ActionTypes from'./ActionTypes';// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nvar Auth=function Auth(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isLoading:false,isAuthenticated:localStorage.getItem('token')?true:false,token:localStorage.getItem('token'),user:localStorage.getItem('creds')?JSON.parse(localStorage.getItem('creds')):null,userinfo:localStorage.getItem('userinfo')?JSON.parse(localStorage.getItem('userinfo')):null,errMess:null};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionTypes.LOGIN_REQUEST:return _objectSpread(_objectSpread({},state),{},{isLoading:true,isAuthenticated:false,user:action.creds});case ActionTypes.LOGIN_SUCCESS:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:true,errMess:'',token:action.token,userinfo:action.userinfo});case ActionTypes.LOGIN_FAILURE:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:false,errMess:action.message});case ActionTypes.LOGOUT_REQUEST:return _objectSpread(_objectSpread({},state),{},{isLoading:true,isAuthenticated:true});case ActionTypes.LOGOUT_SUCCESS:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:false,token:'',user:null,userinfo:null});case ActionTypes.EDIT_USER:return _objectSpread(_objectSpread({},state),{},{userinfo:action.payload});case ActionTypes.EDIT_PASSWORD:return _objectSpread(_objectSpread({},state),{},{user:action.payload});default:return state;}};export default Auth;","map":{"version":3,"sources":["D:/sakshi college/cc miniproject/lib_management/client/src/redux/auth.js"],"names":["ActionTypes","Auth","state","isLoading","isAuthenticated","localStorage","getItem","token","user","JSON","parse","userinfo","errMess","action","type","LOGIN_REQUEST","creds","LOGIN_SUCCESS","LOGIN_FAILURE","message","LOGOUT_REQUEST","LOGOUT_SUCCESS","EDIT_USER","payload","EDIT_PASSWORD"],"mappings":"4KAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA;AACA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAOK,IAPJC,CAAAA,KAOI,2DAPI,CACdC,SAAS,CAAE,KADG,CAEdC,eAAe,CAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgC,IAAhC,CAAuC,KAF1C,CAGdC,KAAK,CAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHO,CAIdE,IAAI,CAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,CAA4E,IAJpE,CAKdK,QAAQ,CAAEN,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAmCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,CAAkF,IAL9E,CAMdM,OAAO,CAAE,IANK,CAOJ,IAAXC,CAAAA,MAAW,2CACd,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKd,CAAAA,WAAW,CAACe,aAAjB,CACI,sCAAWb,KAAX,MACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,KAFrB,CAGII,IAAI,CAAEK,MAAM,CAACG,KAHjB,GAKJ,IAAKhB,CAAAA,WAAW,CAACiB,aAAjB,CACI,sCAAWf,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,IAFrB,CAGIQ,OAAO,CAAE,EAHb,CAIIL,KAAK,CAAEM,MAAM,CAACN,KAJlB,CAKII,QAAQ,CAAEE,MAAM,CAACF,QALrB,GAOJ,IAAKX,CAAAA,WAAW,CAACkB,aAAjB,CACI,sCAAWhB,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIQ,OAAO,CAAEC,MAAM,CAACM,OAHpB,GAKJ,IAAKnB,CAAAA,WAAW,CAACoB,cAAjB,CACI,sCAAWlB,KAAX,MACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,IAFrB,GAKJ,IAAKJ,CAAAA,WAAW,CAACqB,cAAjB,CACI,sCAAWnB,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIG,KAAK,CAAE,EAHX,CAIIC,IAAI,CAAE,IAJV,CAKIG,QAAQ,CAAE,IALd,GAQJ,IAAKX,CAAAA,WAAW,CAACsB,SAAjB,CACI,sCAAWpB,KAAX,MACIS,QAAQ,CAAEE,MAAM,CAACU,OADrB,GAGJ,IAAKvB,CAAAA,WAAW,CAACwB,aAAjB,CACI,sCACOtB,KADP,MAEIM,IAAI,CAAEK,MAAM,CAACU,OAFjB,GAIJ,QACI,MAAOrB,CAAAA,KAAP,CA9CR,CAgDH,CAxDD,CA0DA,cAAeD,CAAAA,IAAf","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\n\r\n// The auth reducer. The starting state sets authentication\r\n// based on a token being in local storage. In a real app,\r\n// we would also want a util to check if the token is expired.\r\nconst Auth = (state = {\r\n        isLoading: false,\r\n        isAuthenticated: localStorage.getItem('token') ? true : false,\r\n        token: localStorage.getItem('token'),\r\n        user: localStorage.getItem('creds') ? JSON.parse(localStorage.getItem('creds')) : null,\r\n        userinfo: localStorage.getItem('userinfo') ? JSON.parse(localStorage.getItem('userinfo')) : null,\r\n        errMess: null\r\n    }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOGIN_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: false,\r\n                user: action.creds\r\n            };\r\n        case ActionTypes.LOGIN_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                errMess: '',\r\n                token: action.token,\r\n                userinfo: action.userinfo\r\n            };\r\n        case ActionTypes.LOGIN_FAILURE:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                errMess: action.message\r\n            };\r\n        case ActionTypes.LOGOUT_REQUEST:\r\n            return {...state,\r\n                isLoading: true,\r\n                isAuthenticated: true\r\n            };\r\n            \r\n        case ActionTypes.LOGOUT_SUCCESS:\r\n            return {...state,\r\n                isLoading: false,\r\n                isAuthenticated: false,\r\n                token: '',\r\n                user: null,\r\n                userinfo: null\r\n            };\r\n\r\n        case ActionTypes.EDIT_USER:\r\n            return {...state,\r\n                userinfo: action.payload};\r\n\r\n        case ActionTypes.EDIT_PASSWORD:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Auth;"]},"metadata":{},"sourceType":"module"}