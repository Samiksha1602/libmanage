{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\n\nconst Issues = (state = {\n  isLoading: true,\n  errMess: null,\n  issues: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_ISSUES:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        issues: action.payload\n      };\n\n    case ActionTypes.ISSUES_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        issues: []\n      };\n\n    case ActionTypes.ISSUES_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload\n      };\n\n    case ActionTypes.ADD_ISSUE:\n      var issue = action.payload;\n      return { ...state,\n        issues: state.issues.concat(issue)\n      };\n\n    case ActionTypes.RETURN_ISSUE:\n      var newissue = action.payload;\n      return { ...state,\n        issues: state.issues.map(issue => {\n          if (issue._id === newissue._id) {\n            return newissue;\n          } else {\n            return issue;\n          }\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Issues;\nexport default Issues;\n\nvar _c;\n\n$RefreshReg$(_c, \"Issues\");","map":{"version":3,"sources":["D:/sakshi college/cc miniproject/lib_management/client/src/redux/issues.js"],"names":["ActionTypes","Issues","state","isLoading","errMess","issues","action","type","ADD_ISSUES","payload","ISSUES_LOADING","ISSUES_FAILED","ADD_ISSUE","issue","concat","RETURN_ISSUE","newissue","map","_id"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,IAAb;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,MAAM,EAAC;AAFa,CAAT,EAECC,MAFD,KAEY;AACvB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,UAAjB;AACI,aAAO,EAAC,GAAGN,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAE,IAAtC;AAA4CC,QAAAA,MAAM,EAAEC,MAAM,CAACG;AAA3D,OAAP;;AAEJ,SAAKT,WAAW,CAACU,cAAjB;AACI,aAAO,EAAC,GAAGR,KAAJ;AAAWC,QAAAA,SAAS,EAAE,IAAtB;AAA4BC,QAAAA,OAAO,EAAE,IAArC;AAA2CC,QAAAA,MAAM,EAAE;AAAnD,OAAP;;AAEJ,SAAKL,WAAW,CAACW,aAAjB;AACI,aAAO,EAAC,GAAGT,KAAJ;AAAWC,QAAAA,SAAS,EAAE,KAAtB;AAA6BC,QAAAA,OAAO,EAAEE,MAAM,CAACG;AAA7C,OAAP;;AAEJ,SAAKT,WAAW,CAACY,SAAjB;AACI,UAAIC,KAAK,GAAGP,MAAM,CAACG,OAAnB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaS,MAAb,CAAoBD,KAApB;AAApB,OAAP;;AAEJ,SAAKb,WAAW,CAACe,YAAjB;AACI,UAAIC,QAAQ,GAAGV,MAAM,CAACG,OAAtB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYG,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaY,GAAb,CAAkBJ,KAAD,IACxC;AACA,cAAGA,KAAK,CAACK,GAAN,KAAYF,QAAQ,CAACE,GAAxB,EACA;AACI,mBAAOF,QAAP;AACH,WAHD,MAIC;AACG,mBAAOH,KAAP;AACP;AACK,SATqB;AAApB,OAAP;;AAYJ;AACI,aAAOX,KAAP;AA7BR;AA+BH,CAlCD;;KAAMD,M;AAmCN,eAAeA,MAAf","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\n\r\nconst Issues = (state = { isLoading: true,\r\n    errMess: null,\r\n    issues:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_ISSUES:\r\n            return {...state, isLoading: false, errMess: null, issues: action.payload};\r\n\r\n        case ActionTypes.ISSUES_LOADING:\r\n            return {...state, isLoading: true, errMess: null, issues: []}\r\n\r\n        case ActionTypes.ISSUES_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        case ActionTypes.ADD_ISSUE:\r\n            var issue = action.payload;\r\n            return { ...state, issues: state.issues.concat(issue)};\r\n\r\n        case ActionTypes.RETURN_ISSUE:\r\n            var newissue = action.payload;\r\n            return { ...state, issues: state.issues.map((issue)=>\r\n                {\r\n                if(issue._id===newissue._id)\r\n                {\r\n                    return newissue;\r\n                }\r\n            else {\r\n                    return issue;\r\n            }\r\n                 })\r\n                }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default Issues;"]},"metadata":{},"sourceType":"module"}